<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Class Details</title>
    <link rel="stylesheet" href="/css/navbar.css">
    <script src="https://kit.fontawesome.com/b99e675b6e.js"></script>
    <script src="/js/navbar.js"></script>
    <style>
        .class-container ul {
            list-style-type: none;
            padding: 0;
        }
        .class-container li {
            padding: 10px;
            margin-bottom: 5px;
            background-color: #f0f0f0;
            border-radius: 5px;
        }
        .class-container a {
            text-decoration: none;
            color: black;
        }
        .class-container button, .class-container .add-field {
            cursor: pointer;
            padding: 10px 20px;
            margin-top: 20px;
            border: none;
            background-color: #2e4ead;
            color: white;
            border-radius: 5px;
            font-size: 16px;
        }
        .class-container button:hover, .class-container .add-field:hover {
            background-color: #4360b5;
        }
        .class-container input, .class-container textarea, .class-container select {
            width: 95%;
            padding: 12px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .class-container .hidden {
            display: none;
        }
        .class-container .chart-container {
            width: 100%; /* Make the container responsive */
            max-width: 600px; /* Set a max-width for better presentation */
            height: auto; /* Adjust height to content */
            margin: 20px auto; /* Center the chart and add margin */
            background-color: #fff; /* Add white background */
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .class-container canvas {
            display: block;
            width: 100%; /* Make canvas responsive */
            height: auto; /* Adjust height to content */
        }
        .class-container form {
            margin-bottom: 20px;
        }
        .student-table-container {
            max-height: 300px; /* Set the maximum height for the table container */
            overflow-y: auto; /* Add vertical scrollbar if content exceeds max height */
            background: #fff; /* Background color to match the rest of the design */
            border: 1px solid #ccc; /* Optional: Add border for better visual separation */
            border-radius: 8px; /* Match the border radius of other elements */
            margin: 10px 0; /* Optional: Add margin around the container */
            padding: 10px; /* Optional: Add padding inside the container */
        }
        .student-table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        .student-table th, .student-table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
            background: #fff; /* Ensure the background is white */
        }
        .student-table th {
            background-color: #f0f0f0;
            position: sticky; /* Keep headers fixed */
            top: 0;
            z-index: 1; /* Ensure headers are above table content */
        }
        
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        function toggleField(fieldId, addButtonId, removeButtonId) {
            const field = document.getElementById(fieldId);
            const addButton = document.getElementById(addButtonId);
            const removeButton = document.getElementById(removeButtonId);

            field.classList.toggle('hidden');
            addButton.classList.toggle('hidden');
            removeButton.classList.toggle('hidden');
        }

        async function fetchAttendanceData() {
            const response = await fetch('/attendances/attendance-data/<%= classInfo._id %>');
            if (response.ok) {
                return await response.json();
            } else {
                console.error('Failed to fetch attendance data:', response.statusText);
                return [];
            }
        }

        async function renderChart() {
            const data = await fetchAttendanceData();

            const labels = data.map(record => record.date);
            const attendancePercentages = data.map(record => {
                const total = record.presentCount + record.absentCount;
                return (record.presentCount / total) * 100;
            });

            const ctx = document.getElementById('attendanceChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Attendance Percentage',
                            data: attendancePercentages,
                            borderColor: 'blue',
                            fill: false
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        document.addEventListener('DOMContentLoaded', renderChart);
    </script>
</head>
<body>
    <div class="wrapper">
        <%- include('_navbar2', { userRole: userRole }) %>
        <div class="main_container">
            <div class="class-container">
                <h1>Class: <%= classInfo.name %></h1>
                <h2>Total Attendance Percentage: <%= totalAttendancePercentage.toFixed(2) %> %</h2>
                <h2>Attendance Over Time:</h2>
                <div class="chart-container">
                    <canvas id="attendanceChart"></canvas>
                </div>
                <h2>Student List:</h2>
                <div class="student-table-container">
                    <table class="student-table">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Attendance Percentage</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (studentAttendancePercentages && studentAttendancePercentages.length > 0) { %>
                                <% studentAttendancePercentages.forEach(function(student) { %>
                                    <tr>
                                        <td><%= student.username %></td>
                                        <td><%= student.attendancePercentage.toFixed(2) %> %</td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="2">No students assigned</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                <ul>
                    <form action="/attendances/attendance/<%= classInfo._id %>" method="get">
                        <button type="submit">Create Attendance Report</button>
                    </form>
                </ul>
                <br>
                <h2>Add Task:</h2>
                <br>
                <!-- Form to add a new task -->
                <form action="/teachers/create-task/<%= classInfo._id %>" method="post">
                    <label for="description">Task Description:</label>
                    <textarea id="description" name="description" required></textarea>
                    
                    <div id="importance-field" class="hidden">
                        <label for="importance">Importance:</label>
                        <select id="importance" name="importance">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                        <button type="button" id="remove-importance" class="hidden" onclick="toggleField('importance-field', 'add-importance', 'remove-importance')">- Remove Importance</button>
                    </div>
                    <button type="button" id="add-importance" class="add-field" onclick="toggleField('importance-field', 'add-importance', 'remove-importance')">+ Add Importance</button>

                    <div id="duedate-field" class="hidden">
                        <label for="optionalDueDate">Due Date:</label>
                        <input type="date" id="optionalDueDate" name="optionalDueDate">
                        <button type="button" id="remove-duedate" class="hidden" onclick="toggleField('duedate-field', 'add-duedate', 'remove-duedate')">- Remove Due Date</button>
                    </div>
                    <button type="button" id="add-duedate" class="add-field" onclick="toggleField('duedate-field', 'add-duedate', 'remove-duedate')">+ Add Due Date</button>

                    <button type="submit">Add Task</button>
                </form>
                <form action="/teachers/manage-tasks/<%= classInfo._id %>" method="get">
                    <button type="submit">Manage Tasks</button>
                </form>
                <button class="back-button" onclick="window.location.href='/teachers/view-classes'">Back to Classes</button>
            </div>
        </div>
    </div>
</body>
</html>
